<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WCBG.ToolsForUnity</name>
    </assembly>
    <members>
        <member name="T:EventTriggerListener">
            <summary>
            通过重写EventTrigger使支持返回被点击的物体
            </summary>
        </member>
        <member name="T:Serilizer">
            <summary>
            序列化与反序列化
            </summary>
        </member>
        <member name="T:MySession">
            <summary>
            会话端
            </summary>
        </member>
        <member name="M:MySession.Send(System.Byte[])">
            <summary>
            发送数据
            </summary>
            <param name="buf"></param>
        </member>
        <member name="M:MySession.GetIp">
            <summary>
            获取连接的ip
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySession.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:MySession.GetBuffer(System.Int32,System.Int32)">
            <summary>
            提取正确数据包
            </summary>
        </member>
        <member name="M:MySession.AddQueue(System.Byte[])">
            <summary>
            添加队列数据
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:MySession.ClearQueue">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="T:MyTcpServer">
            <summary>
            服务端
            </summary>
        </member>
        <member name="M:MyTcpServer.OpenServer(System.Int32)">
            <summary>
            启动服务
            </summary>
            <param name="port">端口号</param>
        </member>
        <member name="M:MyTcpServer.CloseServer">
            <summary>
            关闭服务
            </summary>
        </member>
        <member name="M:MyTcpServer.ListenConnecting">
            <summary>
            监听客户端请求的方法；
            </summary>
        </member>
        <member name="M:MyTcpServer.ReceiveData(System.Object)">
            <summary>
            接收数据
            </summary>
            <param name="sokConnectionparn"></param>
        </member>
        <member name="M:MyTcpServer.SendData(System.String,System.Byte[])">
            <summary>
            发送数据给指定的客户端
            </summary>
            <param name="_endPoint">客户端套接字</param>
            <param name="_buf">发送的数组</param>
            <returns></returns>
        </member>
        <member name="T:ClassObjPool`1">
            <summary>
            对象池，继承对象池句柄
            </summary>
        </member>
        <member name="M:ClassObjPool`1.Release(PooledClassObject)">
            <summary>
            回收进入对象池
            </summary>
            <param name="obj">Object.</param>
        </member>
        <member name="F:ClassObjPoolBase.reqSeq">
            <summary>
            会一直递增，对象的数量
            </summary>
        </member>
        <member name="T:IObjPoolCtrl">
            <summary>
            类对象控制器
            </summary>
        </member>
        <member name="F:PooledClassObject.usingSeq">
            <summary>
            正在使用的引用，在对象池里面会自增，唯一
            </summary>
        </member>
        <member name="F:PooledClassObject.holder">
            <summary>
            对象控制器
            </summary>
        </member>
        <member name="T:PoolObjHandle`1">
            <summary>
            对象操作句柄，句柄可以很多，但是操作的都是同一个对象
            </summary>
        </member>
        <member name="F:PoolObjHandle`1._handleSeq">
            <summary>
            跟对象的seq同步，这样可以对比是不是同一个对象
            </summary>
        </member>
        <member name="P:PoolObjHandle`1.handle">
            <summary>
            取得对象的操作句柄
            </summary>
            <value>The handle.</value>
        </member>
        <member name="M:PoolObjHandle`1.Validate">
            <summary>
            启用当前对象， 如果对象已经为null，那么启用失败
            </summary>
        </member>
        <member name="M:PoolObjHandle`1.Release">
            <summary>
            释放当前对象
            </summary>
        </member>
        <member name="M:PoolObjHandle`1.op_Implicit(PoolObjHandle{`0})~`0">
            可以直接赋值给T
        </member>
        <member name="M:Resource.Load(System.String)">
            <summary>
            从路径中加载， 不是AssetBundle, 也不是Resources
            </summary>
            <param name="ifsExtractPath">Ifs extract path.</param>
        </member>
        <member name="M:CameraUtil.CaptureCamera(UnityEngine.Camera,UnityEngine.Rect)">
            <summary>
            对相机进行截图
            </summary>
        </member>
        <member name="T:MyColor.ColorUtil">
            <summary>
            颜色工具类
            </summary>
        </member>
        <member name="M:MyColor.ColorUtil.ConvertRgbToHsv(UnityEngine.Color)">
            <summary>
            rgb--->hsv
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:MyColor.ColorUtil.ConvertRgbToHsv(System.Double,System.Double,System.Double)">
            <summary>
            Converts an RGB color to an HSV color.
            </summary>
            <param name="r"></param>
            <param name="b"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:MyColor.ColorUtil.ConvertHsvToRgb(System.Double,System.Double,System.Double,System.Single)">
            <summary>
            Converts an HSV color to an RGB color.
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="F:MyColor.HsvColor.H">
            <summary>
            The Hue, ranges between 0 and 360
            </summary>
        </member>
        <member name="F:MyColor.HsvColor.S">
            <summary>
            The saturation, ranges between 0 and 1
            </summary>
        </member>
        <member name="M:MyColor.ColorExtension.ToHex(UnityEngine.Color)">
            <summary>
            unity_color->hex
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:MyColor.ColorExtension.FromHex(UnityEngine.Color,System.String)">
            <summary>
            hex - > unity_color
            </summary>
            <param name="col"></param>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:CSVUtil.LoadCsvData``1(System.String)">
            <summary>
            加载CSV结构数据
            </summary>
            <typeparam name="T_CsvData"></typeparam>
            <param name="csvFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:CSVUtil.CsvFileToCSharpClass(System.String,System.String)">
            <summary>
            CSV文件-》C#类文件
            </summary>
            <param name="src_filePath"></param>
            <param name="dst_filepath"></param>
        </member>
        <member name="M:EncryptUtils.Base64Encrypt(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EncryptUtils.Base64Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <param name="encode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:EncryptUtils.Base64Decrypt(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="input">需要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EncryptUtils.Base64Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="input">需要解密的字符串</param>
            <param name="encode">字符的编码</param>
            <returns></returns>
        </member>
        <member name="M:Everything.EverythingHelper.StartEverythingSearch(System.String,System.String)">
            <summary>
            查找文件名包含制定字段的本地文件
            </summary>
            <param name="searchStr">要查找的字段</param>
            <param name="path_everything">everything程序的路径</param>
            <returns></returns>
        </member>
        <member name="M:Everything.EverythingHelper.IsTheProcessOnRunning(System.String)">
            <summary>
            指定进程是否存在
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FileTools.CopyDirectory(System.String,System.String)">
            <summary>
            复制文件夹（及文件夹下所有子文件夹和文件）
            </summary>
            <param name="sourcePath">待复制的文件夹路径</param>
            <param name="destinationPath">目标路径</param>
        </member>
        <member name="M:FileTools.GetMD5(System.String)">
            <summary>
            获得文件的MD5值
            </summary>
        </member>
        <member name="M:FileTools.GetMD5FromString(System.String)">
            <summary>
            获取字符串的md5
            </summary>
        </member>
        <member name="M:FileTools.GetFileSize(System.String)">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:GeneralUtils.IsObjectAlive(System.Object)">
            <summary>
            对象是否活动
            </summary>
        </member>
        <member name="M:GeneralUtils.IsCallbackValid(System.Delegate)">
            <summary>
            回调是否可用
            </summary>
        </member>
        <member name="M:InputTimerManager.AddTimerNoInput(System.Single,System.Boolean,System.Action{System.Int32})">
            <summary>
            添加 无操作时间统计事件
            </summary>
            <param name="intervalTime">间隔时间</param>
            <param name="loop">是否循环</param>
            <param name="callback">事件回调</param>
        </member>
        <member name="M:PathTool.PathHelper.PathLength(UnityEngine.Vector3[])">
            <summary>
            Returns the length of a curved path drawn through the provided array of Vector3s.
            </summary>
            <returns>
            The length.
            </returns>
            <param name='path'>
            A <see cref="!:Vector3[]"/>
            </param>
        </member>
        <member name="M:Protocol.ProtoBufSerialize``1(``0)">
            Proto-buffer serialize.
        </member>
        <member name="T:RegxUtil">
            <summary>
            正则匹配工具类
            </summary>
        </member>
        <member name="F:RegxUtil.enCommonRegx.EMAIL">
            <summary>
            邮箱地址
            </summary>
        </member>
        <member name="F:RegxUtil.enCommonRegx.HANDZI">
            <summary>
            中文汉字
            </summary>
        </member>
        <member name="F:RegxUtil.enCommonRegx.PHONE_NUMBER">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="F:RegxUtil.enCommonRegx.IP">
            <summary>
            ip地址
            </summary>
        </member>
        <member name="F:RegxUtil.enCommonRegx.URL">
            <summary>
            网址
            </summary>
        </member>
        <member name="F:RegxUtil.enCommonRegx.CHAR_SMALL">
            <summary>
            小写英文字母
            </summary>
        </member>
        <member name="F:RegxUtil.enCommonRegx.CHAR_LARGE">
            <summary>
            大写英文字母
            </summary>
        </member>
        <member name="F:RegxUtil.enCommonRegx.ACOUNT_CHECK1">
            <summary>
            账号1
            </summary>
        </member>
        <member name="F:RegxUtil.enCommonRegx.ACOUND_CHECK2">
            <summary>
            账号2
            </summary>
        </member>
        <member name="M:RegxUtil.GetMatch(System.String,System.String)">
            <summary>
            根据匹配规则进行匹配
            </summary>
            <param name="src"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:RegxUtil.GetAllMatches(System.String,System.String)">
            <summary>
            根据匹配规则获取所有的匹配项
            </summary>
            <param name="src"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:RegxUtil.IsTheCommonRegx(System.String,RegxUtil.enCommonRegx)">
            <summary>
            是否是指定的一些通用的匹配项
            </summary>
            <param name="src"></param>
            <param name="commonRegx"></param>
            <returns></returns>
        </member>
        <member name="T:ResSlightly">
            <summary>
            加载本地或在线的资源
            </summary>
        </member>
        <member name="M:ResSlightly.LoadTexture2D(System.String,System.Action{UnityEngine.Texture2D},System.Boolean,System.Boolean)">
            <summary>
            加载一张图片
            </summary>
            <param name="path">网络路径或本地路径</param>
            <param name="pathtype"></param>
            <param name="callback"></param>
            <param name="isAutoSave">图片是否要自动保存</param>
            <param name="iscache"></param>
        </member>
        <member name="M:JsonSerialization`1.ToList">
             <summary>  
            返回创建的list  
             </summary>  
             <returns></returns>  
        </member>
        <member name="T:SimpleJson.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:SimpleJson.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:SimpleJson.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:SimpleJson.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SimpleJson.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:SimpleJson.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.SerializeObject(System.Object,SimpleJson.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
        <member name="M:DB.DbAccess.SelectWhere(System.String,System.String[],System.String[],System.String[],System.String[])">
            <summary>
            查询数据库
            </summary>
            <param name="tableName">表名</param>
            <param name="items">结果中包含的选项</param>
            <param name="col">用来查询的选项</param>
            <param name="operation">操作（“=”）</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="P:TimeUtils.CurTime">
            <summary>
            DataTime类型的时间
            </summary>
            <value>The current time.</value>
        </member>
        <member name="M:TimeUtils.IsNight">
            <summary>
            是不是晚上
            </summary>
            <returns></returns>
        </member>
        <member name="M:TimeUtils.IsSameDay(System.DateTime,System.DateTime)">
            <summary>
            是不是同一天
            </summary>
            <param name="oldT"></param>
            <param name="newT"></param>
            <returns></returns>
        </member>
        <member name="M:UGUITool.GetRectPosForScreenPos(UnityEngine.Canvas,UnityEngine.Vector2,UnityEngine.Vector2@)">
            <summary>
            屏幕坐标-》canvas坐标
            </summary>
            <param name="cvs"></param>
            <param name="ScreenPos"></param>
            <param name="RectTransPos"></param>
            <returns></returns>
        </member>
        <member name="M:UGUITool.GetRectPosForWorldPos(UnityEngine.Canvas,UnityEngine.Vector3,UnityEngine.Vector2@)">
            <summary>
            世界坐标-》canvas坐标
            </summary>
            <param name="cvs"></param>
            <param name="worldPos"></param>
            <param name="RectTransPos"></param>
            <returns></returns>
        </member>
        <member name="M:UGUITool.GetCanvasAnchorLocalPosition(UnityEngine.Canvas,UnityEngine.RectTransform)">
            <summary>
            其它层级ui坐标-》Canvas根节点anchorPosition
            </summary>
            <param name="cvs"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:UGUITool.GetUGUIElementBound(System.Collections.Generic.List{UnityEngine.RectTransform},UnityEngine.Vector2@,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            获取一系列ui组合的bound
            </summary>
            <param name="rts"></param>
            <param name="lu"></param>
            <param name="rd"></param>
            <param name="center"></param>
        </member>
        <member name="M:BaseWindow.OnAutoSetUIProperty">
            <summary>
            每个Window 必须要调用
            </summary>
        </member>
        <member name="M:BaseWindow.OnOpen(System.Object[])">
            <summary>
            界面打开调用
            </summary>
            <param name="paramArray"></param>
        </member>
        <member name="M:BaseWindow.OnRefresh">
            <summary>
            界面刷新，数据刷新逻辑放在此函数上。
            </summary>
        </member>
        <member name="M:BaseWindow.OnUpdate">
            <summary>
            每帧刷新
            </summary>
        </member>
        <member name="M:BaseWindow.OnClose">
            <summary>
            关闭界面调用
            </summary>
        </member>
        <member name="M:BaseWindow.AddListeners">
            <summary>
            添加监听
            </summary>
        </member>
        <member name="M:BaseWindow.RemoveListensers">
            <summary>
            移除监听
            </summary>
        </member>
        <member name="M:WindowManager.CloseWindow(System.String,System.Boolean,System.Action)">
            <summary>
            关闭窗口
            </summary>
            <param name="name">窗口名字</param>
            <param name="isCache">是否需要缓存该窗口，为True不会Destroy</param>
            <param name="callback">窗口关闭回调事件（某些有关闭的动画过程）</param>
        </member>
        <member name="M:WindowManager.IsOpenWindow(System.String)">
            <summary>
            获取某个窗口是否打开
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:WCBG.ToolsForUnity.Tools.FileTools.CopyDirectory(System.String,System.String)">
            <summary>
            复制文件夹（及文件夹下所有子文件夹和文件）
            </summary>
            <param name="sourcePath">待复制的文件夹路径</param>
            <param name="destinationPath">目标路径</param>
        </member>
        <member name="M:WCBG.ToolsForUnity.Tools.FileTools.GetMD5(System.String)">
            <summary>
            获得文件的MD5值
            </summary>
        </member>
        <member name="M:WCBG.ToolsForUnity.Tools.FileTools.GetMD5FromString(System.String)">
            <summary>
            获取字符串的md5
            </summary>
        </member>
        <member name="M:WCBG.ToolsForUnity.Tools.FileTools.GetFileSize(System.String)">
            <summary>
            文件大小
            </summary>
        </member>
    </members>
</doc>
